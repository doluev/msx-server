import { chromium } from 'playwright';
import express from 'express';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(cors());
console.log(`üöÄ [CORS] ${new Date().toISOString()} CORS middleware enabled`);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use("/msx", express.static(path.join(__dirname, "public/msx"), {
  setHeaders: (res, path) => {
    console.log(`üìÅ [STATIC] ${new Date().toISOString()} Serving file: ${path}`);
  }
}));

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get("/health", (req, res) => {
  console.log(`ü©∫ [HEALTH] ${new Date().toISOString()} Health check requested`);
  res.json({ status: "ok", timestamp: new Date().toISOString() });
});

async function parsePage(url) {
  try {
    console.log(`üîç [PARSE] ${new Date().toISOString()} –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);
    const m3u8Requests = new Set();

    console.log(`üöÄ [PLAYWRIGHT] ${new Date().toISOString()} –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Chromium...`);
    const browser = await chromium.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--single-process'
      ]
    });
    console.log(`‚úÖ [PLAYWRIGHT] ${new Date().toISOString()} –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`);

    console.log(`üìÑ [PLAYWRIGHT] ${new Date().toISOString()} –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
    const page = await browser.newPage();
    console.log(`‚úÖ [PLAYWRIGHT] ${new Date().toISOString()} –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞`);

    console.log(`üåê [NETWORK] ${new Date().toISOString()} –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
    page.on('request', (request) => {
      const reqUrl = request.url();
      console.log(`[NETWORK] ${new Date().toISOString()} –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${reqUrl}`);
      if (reqUrl.includes('.m3u8') && /(master.*\.m3u8$|index.*\.m3u8$)/i.test(reqUrl)) {
        console.log(`üé• [MOVIE] ${new Date().toISOString()} –ù–∞–π–¥–µ–Ω–∞ .m3u8 —Å—Å—ã–ª–∫–∞: ${reqUrl}`);
        m3u8Requests.add(reqUrl);
      }
    });

    console.log(`üîó [NAVIGATION] ${new Date().toISOString()} –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
    await page.goto(url, { timeout: 60000, waitUntil: 'networkidle' }).catch(err => {
      console.error(`‚ùå [NAVIGATION] ${new Date().toISOString()} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${err.message}`);
    });
    console.log(`‚úÖ [NAVIGATION] ${new Date().toISOString()} –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);

    console.log(`üé¨ [INTERACTION] ${new Date().toISOString()} –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É Play...`);
    await page.click('button.play', { timeout: 5000 }).catch(err => {
      console.log(`‚ö†Ô∏è [INTERACTION] ${new Date().toISOString()} –ö–Ω–æ–ø–∫–∞ Play –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${err.message}`);
    });

    console.log(`üìπ [DOM] ${new Date().toISOString()} –ü—Ä–æ–≤–µ—Ä—è–µ–º <video> —Ç–µ–≥–∏...`);
    const videoSources = await page.evaluate(() => {
      const videos = Array.from(document.querySelectorAll('video[src]'));
      return videos
        .map(video => video.getAttribute('src'))
        .filter(src => src && src.includes('.m3u8'));
    });
    videoSources.forEach(src => {
      console.log(`üé• [MOVIE-DOM] ${new Date().toISOString()} –ù–∞–π–¥–µ–Ω src –≤ <video>: ${src}`);
      m3u8Requests.add(src);
    });

    console.log(`‚è≥ [WAIT] ${new Date().toISOString()} –û–∂–∏–¥–∞–µ–º 3s –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
    await page.waitForTimeout(3000);

    console.log(`üîå [PLAYWRIGHT] ${new Date().toISOString()} –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...`);
    await browser.close();
    console.log(`‚úÖ [PLAYWRIGHT] ${new Date().toISOString()} –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç`);

    const uniqueLinks = Array.from(m3u8Requests);
    console.log(`üéØ [RESULT] ${new Date().toISOString()} –ù–∞–π–¥–µ–Ω–æ ${uniqueLinks.length} —Å—Å—ã–ª–æ–∫: ${JSON.stringify(uniqueLinks)}`);
    return uniqueLinks.filter(link => link.includes('.m3u8'));
  } catch (error) {
    console.error(`‚ùå [ERROR] ${new Date().toISOString()} –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
    return [];
  }
}

app.get("/msx/videos.json", async (req, res) => {
  try {
    console.log(`üì• [HTTP] ${new Date().toISOString()} –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /msx/videos.json`);
    const targetUrl = 'https://kinovod270825.pro/film/113467-gabriel';
    const movieTitle = 'Gabriel';

    console.log(`‚è≥ [HTTP] ${new Date().toISOString()} –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞...`);
    const m3u8Links = await parsePage(targetUrl);
    console.log(`üìã [DATA] ${new Date().toISOString()} –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º JSON...`);

    const items = m3u8Links.map(link => ({
      title: `${movieTitle} - ${link.includes('1080') ? '1080p' : '720p'}`,
      playerLabel: `${movieTitle} - ${link.includes('1080') ? '1080p' : '720p'}`,
      action: `video:${link}`,
      icon: 'movie'
    }));

    if (items.length === 0) {
      console.log(`‚ö†Ô∏è [DATA] ${new Date().toISOString()} –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É`);
      items.push({
        title: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        playerLabel: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        action: 'info:–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∏',
        icon: 'warning'
      });
    }

    const msxData = {
      type: 'pages',
      headline: `Gabriel (${items.length} –ø–æ—Ç–æ–∫–æ–≤)`,
      template: {
        tag: 'Web',
        type: 'separate',
        layout: '0,0,2,4',
        icon: 'msx-white-soft:movie',
        color: 'msx-glass'
      },
      items
    };
    console.log(`üì§ [HTTP] ${new Date().toISOString()} –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: ${JSON.stringify(msxData, null, 2)}`);
    res.json(msxData);
  } catch (error) {
    console.error(`‚ùå [HTTP] ${new Date().toISOString()} –û—à–∏–±–∫–∞ –≤ /msx/videos.json: ${error.message}`);
    res.status(500).json({
      type: 'pages',
      headline: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
      items: [{
        title: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        playerLabel: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        action: `info:${error.message}`,
        icon: 'warning'
      }]
    });
  }
});

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`üöÄ [SERVER] ${new Date().toISOString()} Server running on port ${PORT}`);
});
